'''
在日常coding中，分支语句的使用非常普遍，经常会根据是否满足一定的条件对代码执行的逻辑进行一些控制，所以大家对if[elif[else]]一定不会陌生。
分支语句中的else子句在其它的条件不满足的时候会被执行到，适当的使用分支语句能够让我们的代码逻辑更加的丰富。
在分支语句中使用else子句在一些常见的编程语言中的用法基本相同，类似于提供了一条默认的执行路径，配合if等条件判断语句使用，
相比其它的编程语言(c#, java, js等)在python中，else有一些特殊的用法，配合for, while等循环语句使用，
甚至还能配合异常处理try except语句进行使用，能够让我们的代码更加的简洁。
'''
# 配合for/while循环语句使用
#在for循环语句的后面紧接着else子句，在循环正常结束的时候（非return或者break等提前退出的情况下），else子句的逻辑就会被执行到。先来看一个例子：

# 质数定义：
# 只有1和它本身两个因数的自然数
def print_prime(n):
    for i in range(2, n):
        for j in range(2, i):
            if i % j == 0:
                break
        else:
            print("{} it's a prime number".format(i))


print_prime(7)

'''
一个简单打印素数的例子，判断某个数字是否是素数的时候需要遍历比它自己小的整数，任何一个满足整除的情况则判断结束，
否则打印这是一个素数的info，有了else的加持，整个例子的逻辑相当的“self-expressive”，
如同伪代码一般的好理解而且相比在判断整除的时候设置标志值然后在函数的结尾处判断标志值决定是否打印数字时素数的消息，
代码更简洁没有那么多要描述如何做的“过程式”准备工作。
'''


